# any commit to the master branch will trigger the CI build
trigger:
  - master

# use a Windows agent with VS to build the .NET Core MSTest project
# you can replace this with Ubuntu too without changing the tasks
pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

variables:
- group: token
- name: assigned_to
  value: 
- name: System.Debug
  value: true

stages:
  # - stage: CI
  #   jobs:
  #     - job: Build
  #       steps:
  #         - task: NuGetToolInstaller@1
  #           inputs:
  #             checkLatest: false

  #         - task: NuGetCommand@2
  #           displayName: NuGet v2 Restore

  #         - task: DotNetCoreCLI@2
  #           displayName: Restore
  #           inputs:
  #             command: restore
  #             projects: '**/SeleniumTest.csproj'

  #         - task: DotNetCoreCLI@2
  #           displayName: Publish
  #           inputs:
  #             command: publish
  #             publishWebProjects: false
  #             projects: '**/SeleniumTest.csproj'
  #             arguments: '--configuration Release -o $(build.artifactstagingdirectory)/SeleniumTest'
  #             zipAfterPublish: false
  #             modifyOutputPath: false

  #         - task: PublishBuildArtifacts@1
  #           displayName: 'Publish Artifact'
  #           inputs:
  #             PathtoPublish: '$(build.artifactstagingdirectory)'
  #           condition: succeededOrFailed()

  # - stage: QAC
  #   jobs:
  #     - job: RunTests
  #       steps:
  #         - task: DownloadBuildArtifacts@0
  #           inputs:
  #             buildType: 'current'
  #             downloadType: 'single'
  #             artifactName: 'drop'
  #             downloadPath: '$(System.DefaultWorkingDirectory)/SeleniumTest'

  #         - task: VSTest@2
  #           displayName: 'Run Visual Studio Tests'
  #           inputs:
  #             testSelector: 'testAssemblies'
  #             testAssemblyVer2: |
  #               **\*SeleniumTest*.dll
  #               !**\*TestAdapter.dll
  #               !**\obj\**
  #             searchFolder: '$(System.DefaultWorkingDirectory)/SeleniumTest'
  #             codeCoverageEnabled: true
  #             runInParallel: true
  - stage: preprod
    jobs:
      - job: Add_variables
        steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Write your commands here
                
                echo $(Build.RequestedForEmail)
                echo $(Build.BuildId)
                echo $(Build.BuildUri)
                echo $(Build.DefinitionVersion)
          - powershell: |
              # Define the URL for the REST API to get the latest build
              $buildsUrl = "https://dev.azure.com/cheindjou/poc/_apis/build/builds?definitions=2&$top=1&api-version=6.0"

              # Define the URL for the REST API to update the variables
              $updateUrl = "https://dev.azure.com/{organization}/{project}/_apis/build/builds/{buildId}/variables?api-version=6.0"

              # Get the latest build ID
              $latestBuild = Invoke-RestMethod -Uri $buildsUrl -Method Get -Headers @{
                  Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
              } | Select-Object -ExpandProperty value

              if ($latestBuild.Count -gt 0) {
                  $latestBuildId = $latestBuild[0].id

                  # Convert the value to JSON
                  $newVariables = @{
                      variables = @{
                         assigned_to = @{
                              value = "70"
                          }
                      }
                  } | ConvertTo-Json

                  # Make the PATCH request to update the variables of the latest build
                  $response = Invoke-RestMethod -Uri ($updateUrl -replace "{buildId}", $latestBuildId) -Method Patch -Body $newVariables -ContentType "application/json" -Headers @{
                      Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
                  }

                  # Check the response
                  if ($response) {
                      Write-Host "Variable updated successfully for the latest build."
                  } else {
                      Write-Host "Failed to update variable for the latest build."
                  }
              } else {
                  Write-Host "No builds found for the specified pipeline."
              }
              displayName: 'Update Assigned To Variable'
              env:
                SYSTEM_ACCESSTOKEN:  $(System.AccessToken)
