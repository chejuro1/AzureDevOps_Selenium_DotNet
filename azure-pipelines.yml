# any commit to the master branch will trigger the CI build
trigger:
  - master

# use a Windows agent with VS to build the .NET Core MSTest project
# you can replace this with Ubuntu too without changing the tasks
pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

variables:
- group: token
- name: assigned_to
  value: 
- name: System.Debug
  value: true

stages:
  # - stage: CI
  #   jobs:
  #     - job: Build
  #       steps:
  #         - task: NuGetToolInstaller@1
  #           inputs:
  #             checkLatest: false

  #         - task: NuGetCommand@2
  #           displayName: NuGet v2 Restore

  #         - task: DotNetCoreCLI@2
  #           displayName: Restore
  #           inputs:
  #             command: restore
  #             projects: '**/SeleniumTest.csproj'

  #         - task: DotNetCoreCLI@2
  #           displayName: Publish
  #           inputs:
  #             command: publish
  #             publishWebProjects: false
  #             projects: '**/SeleniumTest.csproj'
  #             arguments: '--configuration Release -o $(build.artifactstagingdirectory)/SeleniumTest'
  #             zipAfterPublish: false
  #             modifyOutputPath: false

  #         - task: PublishBuildArtifacts@1
  #           displayName: 'Publish Artifact'
  #           inputs:
  #             PathtoPublish: '$(build.artifactstagingdirectory)'
  #           condition: succeededOrFailed()

  # - stage: QAC
  #   jobs:
  #     - job: RunTests
  #       steps:
  #         - task: DownloadBuildArtifacts@0
  #           inputs:
  #             buildType: 'current'
  #             downloadType: 'single'
  #             artifactName: 'drop'
  #             downloadPath: '$(System.DefaultWorkingDirectory)/SeleniumTest'

  #         - task: VSTest@2
  #           displayName: 'Run Visual Studio Tests'
  #           inputs:
  #             testSelector: 'testAssemblies'
  #             testAssemblyVer2: |
  #               **\*SeleniumTest*.dll
  #               !**\*TestAdapter.dll
  #               !**\obj\**
  #             searchFolder: '$(System.DefaultWorkingDirectory)/SeleniumTest'
  #             codeCoverageEnabled: true
  #             runInParallel: true
  - stage: preprod
    jobs:
      - job: Add_variables
        steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Write your commands here
                
                echo $(Build.RequestedForEmail)
                echo $(Build.BuildId)
                echo $(Build.BuildUri)
                echo $(Build.DefinitionVersion)
          - powershell: |
              $url = "https://dev.azure.com/cheindjou/poc/_apis/build/definitions/2?api-version=6.0"

              Write-Host "URL: $url"
              $pipeline = Invoke-RestMethod -Uri $url -Headers @{
                  Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
              }
             
              Write-Host "Pipeline = $($pipeline | ConvertTo-Json -Depth 100)"

              $pipeline.variables.assigned_to.value = "$Department"

              ####****************** update the modified object **************************
              $json = @($pipeline) | ConvertTo-Json -Depth 99


              $updatedef = Invoke-RestMethod -Uri $url -Method Put -Body $json -ContentType "application/json" -Headers @{Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"}

              write-host "==========================================================" 
              Write-host "The value of Varialbe 'Test' is updated to" $updatedef.variables.Test.value

              displayName: 'Update Assigned To Variable'
              env:
                SYSTEM_ACCESSTOKEN:  $(System.AccessToken)
