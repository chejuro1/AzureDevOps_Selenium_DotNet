# any commit to the master branch will trigger the CI build
trigger:
  - master

# use a Windows agent with VS to build the .NET Core MSTest project
# you can replace this with Ubuntu too without changing the tasks
pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

variables:
- group: token
- name: assigned_to
  value: 

      

stages:
  # - stage: CI
  #   jobs:
  #     - job: Build
  #       steps:
  #         - task: NuGetToolInstaller@1
  #           inputs:
  #             checkLatest: false

  #         - task: NuGetCommand@2
  #           displayName: NuGet v2 Restore

  #         - task: DotNetCoreCLI@2
  #           displayName: Restore
  #           inputs:
  #             command: restore
  #             projects: '**/SeleniumTest.csproj'

  #         - task: DotNetCoreCLI@2
  #           displayName: Publish
  #           inputs:
  #             command: publish
  #             publishWebProjects: false
  #             projects: '**/SeleniumTest.csproj'
  #             arguments: '--configuration Release -o $(build.artifactstagingdirectory)/SeleniumTest'
  #             zipAfterPublish: false
  #             modifyOutputPath: false

  #         - task: PublishBuildArtifacts@1
  #           displayName: 'Publish Artifact'
  #           inputs:
  #             PathtoPublish: '$(build.artifactstagingdirectory)'
  #           condition: succeededOrFailed()

  # - stage: QAC
  #   jobs:
  #     - job: RunTests
  #       steps:
  #         - task: DownloadBuildArtifacts@0
  #           inputs:
  #             buildType: 'current'
  #             downloadType: 'single'
  #             artifactName: 'drop'
  #             downloadPath: '$(System.DefaultWorkingDirectory)/SeleniumTest'

  #         - task: VSTest@2
  #           displayName: 'Run Visual Studio Tests'
  #           inputs:
  #             testSelector: 'testAssemblies'
  #             testAssemblyVer2: |
  #               **\*SeleniumTest*.dll
  #               !**\*TestAdapter.dll
  #               !**\obj\**
  #             searchFolder: '$(System.DefaultWorkingDirectory)/SeleniumTest'
  #             codeCoverageEnabled: true
  #             runInParallel: true
  - stage: preprod
    jobs:
      - job: Add_variables
        steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                  # Write your commands here
      
                  echo $(Build.RequestedForEmail)
                  echo $(Build.BuildId)
                  echo $(Build.BuildUri)
                  echo $(Build.DefinitionVersion)
                  printenv
                  assigned_to="jules"
                  url="$SYSTEM_TEAMFOUNDATIONSERVERURI/$SYSTEM_TEAMPROJECTID/_apis/build/definitions/$(Build.DefinitionVersion)?api-version=7.1-preview.7"
                  echo $url
                  curl -X GET -u:$(System.AccessToken) $url | jq -r '.authoredBy.uniqueName'
           
            
                
          - powershell: |
            #   $uniqueName = $env:Build_RequestedForEmail
            #   Write-Host "The uniqueName of the user running the pipeline is: $uniqueName"
              
            #   # Get the URL of the pipeline
            #   $url = ('{0}{1}/_apis/build/definitions/2?api-version=7.1-preview.7' -f $env:SYSTEM_TEAMFOUNDATIONSERVERURI, $env:SYSTEM_TEAMPROJECTID, $env:Build_BuildId)
              
               
            #   Write-Host "Pipeline URL: $url"
              
            #   Write-Host "$env:SYSTEM_ACCESSTOKEN = $(System.AccessToken)"
            #   # Get the pipeline definition
            #   $pipeline = Invoke-RestMethod -Uri $url -Method Get -Headers @{
            #       Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
            #   }
            #   Write-Host "Pipeline = $($pipeline | ConvertTo-Json -Depth 100)"
            #   Write-Host($pipeline)
            #   # Update the assigned_to variable with the user's uniqueName
            #   $pipeline.variables.assigned_to.value = $uniqueName
              
            #   # Convert to JSON for the request body
            #   $json = $pipeline | ConvertTo-Json -Depth 99
              
            #   # Update the pipeline definition with the modified variable
            #   $updatedef = Invoke-RestMethod -Uri $url -Method Put -Body $json -ContentType "application/json" -Headers @{
            #       Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
            #   }
              
            #   # Print the updated value of the assigned_to variable
            #   Write-Host "The value of variable 'assigned_to' is updated to: $($updatedef.variables.assigned_to.value)"
              
            # displayName: 'Update Assigned To Variable'
            # env:
            #   SYSTEM_ACCESSTOKEN:  $(System.AccessToken)
      - job: A
        steps:
        - bash: |
                url="$SYSTEM_TEAMFOUNDATIONSERVERURI/$SYSTEM_TEAMPROJECTID/_apis/build/definitions/$(Build.DefinitionVersion)?api-version=7.1-preview.7"
                echo $url
                assigned_to=$(curl -X GET -u:$(System.AccessToken) $url | jq -r '.authoredBy.uniqueName')
                echo $assigned_to
                echo "##vso[task.setvariable variable=myOutputVar;isoutput=true]$assigned_to"
          name: passOutput

      - job: B
        dependsOn: A
        variables:
          assigned_to: $[ dependencies.A.outputs['passOutput.myOutputVar'] ]  
        steps:
        - bash: |
           echo $(assigned_to)
