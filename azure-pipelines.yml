# any commit to the master branch will trigger the CI build
trigger:
  - master

# use a Windows agent with VS to build the .NET Core MSTest project
# you can replace this with Ubuntu too without changing the tasks
pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

variables:
- group: token
- group: Risk_url
- name: assigned_to
  value: 
# - name: risk
#   value: "This a low impact."

      

stages:
  - stage: CI
    jobs:
      - job: Build
        steps:
          # - task: NuGetToolInstaller@1
          #   inputs:
          #     checkLatest: false

          # - task: NuGetCommand@2
          #   displayName: NuGet v2 Restore

          # - task: DotNetCoreCLI@2
          #   displayName: Restore
          #   inputs:
          #     command: restore
          #     projects: '**/SeleniumTest.csproj'

          # - task: DotNetCoreCLI@2
          #   displayName: Publish
          #   inputs:
          #     command: publish
          #     publishWebProjects: false
          #     projects: '**/SeleniumTest.csproj'
          #     arguments: '--configuration Release -o $(build.artifactstagingdirectory)/SeleniumTest'
          #     zipAfterPublish: false
          #     modifyOutputPath: false
          - task: CopyFiles@2
            inputs:
                SourceFolder: 'scripts'
                Contents: |
                          **/addvariable.sh
                TargetFolder: '$(Build.ArtifactStagingDirectory)/'
            displayName: 'Copy scripts'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact'
            inputs:
              PathtoPublish: '$(build.artifactstagingdirectory)'
            condition: succeededOrFailed()

  # - stage: QAC
  #   jobs:
  #     - job: RunTests
  #       steps:
  #         - task: DownloadBuildArtifacts@0
  #           inputs:
  #             buildType: 'current'
  #             downloadType: 'single'
  #             artifactName: 'drop'
  #             downloadPath: '$(System.DefaultWorkingDirectory)/SeleniumTest'

  #         - task: VSTest@2
  #           displayName: 'Run Visual Studio Tests'
  #           inputs:
  #             testSelector: 'testAssemblies'
  #             testAssemblyVer2: |
  #               **\*SeleniumTest*.dll
  #               !**\*TestAdapter.dll
  #               !**\obj\**
  #             searchFolder: '$(System.DefaultWorkingDirectory)/SeleniumTest'
  #             codeCoverageEnabled: true
  #             runInParallel: true
  - stage: preprod
    jobs:
      - job: Add_variables
        steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                  # Write your commands here
      
                  echo $(Build.RequestedForEmail)
                  echo $(Build.BuildId)
                  echo $(Build.BuildUri)
                  echo $(Build.DefinitionVersion)
                  pip install request
                  url="$SYSTEM_TEAMFOUNDATIONSERVERURI/$SYSTEM_TEAMPROJECTID/_apis/build/definitions/$(Build.DefinitionVersion)?api-version=7.1-preview.7"
                  echo $url
                  curl -X GET -u:$(System.AccessToken) $url | jq -r '.authoredBy.uniqueName'
                  url1="$SYSTEM_TEAMFOUNDATIONSERVERURI/$SYSTEM_TEAMPROJECTID/_apis/build/builds/$(Build.BuildId)/timeline?api-version=6.0"
                  curl -X GET -u:$(System.AccessToken) $url1 | jq -r '.'
          # - task: Bash@3
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #         # Write your commands here
          #         # Get the task log ID from the predefined variable
          #         taskLogId=$(echo "$(Build.JobId).$(System.StageInstanceId).$(System.JobPositionInStage).21" | tr -d '-')
                  
          #         # Construct the URL using the Azure DevOps variables
          #         url="https://dev.azure.com/$(System.CollectionUri)/$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=logs&j=$(taskLogId)"
                  
          #         # Print the URL
          #         echo "Task Log URL for WhiteSource@21: $url"
          # - task: WhiteSource@21
          #   inputs:
          #     cwd: '$(System.DefaultWorkingDirectory)'
          #     projectName: 'a'
          - powershell: |
            #   #   $uniqueName = $env:Build_RequestedForEmail
            #   #   Write-Host "The uniqueName of the user running the pipeline is: $uniqueName"
                
            #   # Get the URL of the pipeline
            #   #$url = ('{0}{1}//_apis/build/builds/120/timeline?api-version=6.0' -f $env:SYSTEM_TEAMFOUNDATIONSERVERURI, $env:SYSTEM_TEAMPROJECTID, $env:Build_BuildId)
              
            #   Write-Host "Pipeline URL: $url"
              
            #   Write-Host "$env:SYSTEM_ACCESSTOKEN = $(System.AccessToken)"
            #   # Get the pipeline definition
            #   $pipeline = Invoke-RestMethod -Uri $url -Method Get -Headers @{
            #       Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
            #   }
            #   Write-Host "Pipeline = $($pipeline | ConvertTo-Json -Depth 100)"
            #   Write-Host($pipeline)
            #   # Update the assigned_to variable with the user's uniqueName
            #   $pipeline.variables.assigned_to.value = $uniqueName
              
            #   # Convert to JSON for the request body
            #   $json = $pipeline | ConvertTo-Json -Depth 99
              
            #   # Update the pipeline definition with the modified variable
            #   $updatedef = Invoke-RestMethod -Uri $url -Method Put -Body $json -ContentType "application/json" -Headers @{
            #       Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
            #   }
              
            #   # Print the updated value of the assigned_to variable
            #   Write-Host "The value of variable 'assigned_to' is updated to: $($updatedef.variables.assigned_to.value)"
              
            # displayName: 'Update Assigned To Variable'
            # env:
            #   SYSTEM_ACCESSTOKEN:  $(System.AccessToken)
          
      - job: A
        dependsOn: Add_variables
        steps:
        # - bash: |
        #         url="$SYSTEM_TEAMFOUNDATIONSERVERURI/$SYSTEM_TEAMPROJECTID/_apis/build/definitions/$(Build.DefinitionVersion)?api-version=7.1-preview.7"
        #         echo $url
        #         assigned_to=$(curl -X GET -u:$(System.AccessToken) $url | jq -r '.authoredBy.uniqueName')
        #         echo $assigned_to
        #         echo "##vso[task.setvariable variable=myOutputVar;isoutput=true]$assigned_to"


        #         url1="$SYSTEM_TEAMFOUNDATIONSERVERURI/$SYSTEM_TEAMPROJECTID/_apis/build/builds/$(Build.BuildId)/timeline?api-version=6.0"
        #         curl -X GET -u:$(System.AccessToken) $url1 | jq -r '.'
        #         url3=$(curl -X GET -u:$(System.AccessToken) $url1 | jq -r '.records[] | select(.type == "Task" and .name == "Initialize job") | .log.url')
        #         echo "URL associated with Task 'passOutput': $url3"

        #         echo $(risk)
        #         # Concatenate the strings
        #         risk="$(risk)"
        #         risk+=" '' 'The scan url:' $url3"

        #         # Print the result
        #         echo "Risk after concatenation: $risk"
        #         echo "##vso[task.setvariable variable=myOutputVar1;isoutput=true]$risk"
        #   name: passOutput
       
        - task: DownloadBuildArtifacts@0
          inputs:
               buildType: 'current'
               downloadType: 'single'
               artifactName: 'drop'
               downloadPath: '$(System.DefaultWorkingDirectory)'
        - task: Bash@3
          inputs:
              targetType: 'inline'
              script: |
                # Write your commands here
                
                pwd
                ls 
      
        - task: Bash@3
          inputs:
            filePath: '$(System.DefaultWorkingDirectory)/scripts/addvariable.sh'
            arguments: '$(System.TeamFoundationCollectionUri) $(System.TeamProject) $(Build.DefinitionVersion) $(System.AccessToken) $(Build.BuildId) $(risk)'

          name: passOutput
        
        # - task: PowerShell@2
        #   inputs:
        #     filePath: '$(System.DefaultWorkingDirectory)/scripts/addvariable.ps1'
        #     arguments: '$(System.TeamFoundationCollectionUri) $(System.TeamProject)'
        #   name: Updatevariablegroup
        # - task: PowerShell@2
        #   displayName: 'Update Variable Group'
        #   inputs:
        #     filePath: '$(System.DefaultWorkingDirectory)/scripts/addvariable.ps1'
        #     arguments: '-SYSTEM_TEAMFOUNDATIONSERVERURI "$(System.TeamFoundationCollectionUri)" -SYSTEM_TEAMPROJECTID "$(System.TeamProject)" -SYSTEM_ACCESSTOKEN "$(System.AccessToken)"'
        #   env:
        #      SYSTEM_ACCESSTOKEN:  $(System.AccessToken)

        - script: |
           
            './$(System.DefaultWorkingDirectory)/scripts/check_variables.sh'
          displayName: 'Check if Variables are empty'
          continueOnError: true  # Continue pipeline even if this script fails
          env:
            A: $(A)
            B: $(B)
            
      - job: B
        dependsOn:
        - A
        - Add_variables
        condition: |
          and
          (
            eq(dependencies.A.result, 'Succeeded'),
            in(dependencies.Add_variables.result, 'Succeeded')
            
          )
        variables:
          assigned_to: $[ dependencies.A.outputs['passOutput.myOutputVar'] ]  
          risk: $[ dependencies.A.outputs['passOutput.myOutputVar1'] ]
          buildurl: $[ dependencies.A.outputs['passOutput.myOutputVar2'] ]
        steps:
        - bash: |
           echo $(assigned_to)
           echo $(risk)   
           